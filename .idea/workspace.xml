<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="a557fe66-eda9-45ab-b5c9-12c34ad00ec7" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1Psm4tmDMsXtFRvugU7usQbETWN" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
  </component>
  <component name="ReplState" timestamp="1569177041572">{:repl-history {:ide [], :local [{:command &quot;(+ 2 2)&quot;, :offset 7, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(+ 2 2 )&quot;, :offset 8, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn apply [] (print \&quot;test\&quot;))&quot;, :offset 30, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(apply)&quot;, :offset 7, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn eval\n  [exp env]\n        (cond ((self-evaluating? exp) exp)\n              ((variable? exp) (lookup-variable-value exp env))\n              ((quoted? exp) (text-of-quotation exp))\n              ((assignment? exp) (eval-assignment exp env))\n              ((definition? exp) (eval-definition exp env))\n              ((if? exp) (eval-if exp env))\n              ((lambda? exp) (make-procedure (lambda-parameters exp)\n                                             (lambda-body exp)\n                                             env))\n              ((begin? exp)\n               (eval-sequence (begin-actions exp) env))\n              ((cond? exp) (eval (cond-&gt;if exp) env))\n              ((application? exp)\n               (scheme-apply (scheme-eval (operator exp) env)\n                      (list-of-values (operands exp) env)))\n              (else\n                (error \&quot;Unknown expression type: EVAL\&quot; exp)))\n  )&quot;, :offset 910, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn apply\n  [procedure arguments]\n        (cond ((primitive-procedure? procedure)\n               (apply-primitive-procedure procedure arguments))\n              ((compound-procedure? procedure)\n               (eval-sequence\n                 (procedure-body procedure)\n                 (extend-environment\n                   (procedure-parameters procedure)\n                   arguments\n                   (procedure-environment procedure))))\n              :else\n              (throw (ex-info \&quot;Unknown procedure type\&quot; {\n                                                        :procedure procedure\n                                                        :arguments arguments\n                                                        :fn :APPLY\n                                                        }))))&quot;, :offset 802, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(list)&quot;, :offset 6, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn ttt []\n  (cond (&lt; 2 3\n         (print \&quot;ses\&quot;))\n  ))&quot;, :offset 56, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn ttt []\n  (cond ((&lt; 2 3)\n         (print \&quot;ses\&quot;))\n  ))&quot;, :offset 58, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn ttt []\n  (cond (&lt; 2 3) (print \&quot;ses\&quot;)\n  ))&quot;, :offset 47, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn ttt []\n  (cond\n    (&lt; 3 3) (print \&quot;ses\&quot;)\n    (&lt; 1 3) (print \&quot;asa\&quot;)\n  ))&quot;, :offset 77, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(ttt)&quot;, :offset 5, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(cond (= 1 0) (print \&quot;asa\&quot;) :else (print \&quot;ses\&quot;) (print \&quot;sesi\&quot;))&quot;, :offset 63, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(cond ((= 1 0) (print \&quot;asa\&quot;)) :else (print \&quot;ses\&quot;) (print \&quot;sesi\&quot;))&quot;, :offset 65, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(cons 'lambda (cons '(1 2) '(a b)))&quot;, :offset 35, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(cons 'lambda (cons '(1 2) '(3 4)))&quot;, :offset 35, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(def test (cons 'lambda (cons '(1 2) '(3 4))))&quot;, :offset 46, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(def t (cons 'lambda (cons '(1 2) '(3 4))))&quot;, :offset 43, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;t&quot;, :offset 1, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(first t)&quot;, :offset 9, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(second t)&quot;, :offset 10, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(rest t)&quot;, :offset 8, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(rest (rest t))&quot;, :offset 15, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(not 1)&quot;, :offset 7, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(is 1)&quot;, :offset 6, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(true? 1)&quot;, :offset 9, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(letfn [(f1 [a] (println a) (f2 a)) (f2 [b] (println b))])&quot;, :offset 58, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(letfn [(f1 [a] (println a) (f2 a)) (f2 [b] (println b))] \n  (f1 1)\n  )&quot;, :offset 71, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defonce l (cons (list 1 2 3) (list 4 5 6)))&quot;, :offset 44, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;l&quot;, :offset 1, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defonce L (java.util.LinkedList. l))&quot;, :offset 37, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(first L)&quot;, :offset 9, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(rest L)&quot;, :offset 8, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.remove L 1)&quot;, :offset 13, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.remove L 4)&quot;, :offset 13, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.set L 1 2)&quot;, :offset 12, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;L&quot;, :offset 1, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defonce A (java.util.LinkedList. (cons \n                                    (java.util.LinkedList. (list 1 2 3))\n                                    (java.util.LinkedList. (list 4 5 6))\n                                    )))&quot;, :offset 226, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(first A)&quot;, :offset 9, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(rest A)&quot;, :offset 8, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.set (.get A 0) 0 0)&quot;, :offset 21, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;A&quot;, :offset 1, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defonce M (java.util.HashMap.))&quot;, :offset 32, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.set M 1 2)&quot;, :offset 12, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.put M 1 4)&quot;, :offset 12, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.get M 1)&quot;, :offset 10, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.values M)&quot;, :offset 11, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(first (.values M))&quot;, :offset 19, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(rest (.values M))&quot;, :offset 18, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(first (.keySet M))&quot;, :offset 19, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(and '() '())&quot;, :offset 13, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(when (and '() '()) (println \&quot;ses\&quot;))&quot;, :offset 36, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(when (not-empty '()) (println \&quot;ses\&quot;))&quot;, :offset 38, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(defn a [] (b)) (defn b [] (println \&quot;called\&quot;))&quot;, :offset 46, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(a)&quot;, :offset 3, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(symbol \&quot;(define NUM 10)\&quot;)&quot;, :offset 26, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(type (symbol \&quot;(define NUM 10)\&quot;))&quot;, :offset 33, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(first (symbol \&quot;(define NUM 10)\&quot;))&quot;, :offset 34, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(list (symbol \&quot;(define NUM 10)\&quot;))&quot;, :offset 33, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(= (symbol \&quot;define\&quot;) 'define)&quot;, :offset 29, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(read-string 'a)&quot;, :offset 16, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(read-string \&quot;'a\&quot;)&quot;, :offset 18, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(read-string \&quot;(define a b)\&quot;)&quot;, :offset 28, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;( type (read-string \&quot;(define a 10)\&quot;))&quot;, :offset 37, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(first (read-string \&quot;(define a 10)\&quot;))&quot;, :offset 37, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(+ 1 2)&quot;, :offset 7, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(read-string \&quot;(+ 1 2)\&quot;)&quot;, :offset 23, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(not '())&quot;, :offset 9, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(rest '())&quot;, :offset 10, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(def M java.util.HashMap.)&quot;, :offset 26, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(def M (java.util.HashMap.))&quot;, :offset 28, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;M&quot;, :offset 1, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(.put M 1 2)&quot;, :offset 12, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;true&quot;, :offset 4, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(symbol? true)&quot;, :offset 14, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(symbol? (read-string \&quot;true\&quot;))&quot;, :offset 30, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(read-string \&quot;a\&quot;)&quot;, :offset 17, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(read-string \&quot;true\&quot;)&quot;, :offset 20, :ns &quot;scheme-lang-clojure-implementation.core&quot;} {:command &quot;(type (read-string \&quot;true\&quot;))&quot;, :offset 27, :ns &quot;scheme-lang-clojure-implementation.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure Application.scheme-lang-clojure-implementation.core">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="repl" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="scheme-lang-clojure-implementation" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Evaluator" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="scheme-lang-clojure-implementation" />
      <setting name="path" value="" />
      <setting name="namespace" value="scheme-lang-clojure-implementation.core" />
      <setting name="execution" value="LEININGEN" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="scheme-lang-clojure-implementation.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="scheme-lang-clojure-implementation" />
      <setting name="path" value="" />
      <setting name="namespace" value="scheme-lang-clojure-implementation.core" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.Evaluator" />
      <item itemvalue="Clojure Application.scheme-lang-clojure-implementation.core" />
      <item itemvalue="Clojure REPL.repl" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.scheme-lang-clojure-implementation.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="a557fe66-eda9-45ab-b5c9-12c34ad00ec7" name="Default Changelist" comment="" />
      <created>1566670989392</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1566670989392</updated>
      <workItem from="1566670990555" duration="5546000" />
      <workItem from="1568842499082" duration="2725000" />
      <workItem from="1568897824140" duration="14919000" />
      <workItem from="1569068805454" duration="20078000" />
      <workItem from="1569144578788" duration="17056000" />
      <workItem from="1569219226964" duration="369000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>